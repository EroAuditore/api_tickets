require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/clientes", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Cliente. As you add validations to Cliente, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      nombre:   "Nombre cliente",
      rfc:      "RFC cliente",
      direccion:"direccion cliente",
      email:    "email@mail.com",
      agente_id: FactoryBot.create(:agente).id 
    }
  }

  let(:invalid_attributes) {
    {
      nombre:   "",
      rfc:      "",
      direccion:"",
      email:    "" 
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ClientesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  # let(:valid_headers) {ÃŸ
  #   {}
  # }

  let!(:clientes_list) do
    FactoryBot.create_list(:cliente, 10)
  end

  describe "GET /index" do
    it "renders a successful response" do
      get clientes_url     
      expect(json).not_to be_empty
      expect(json.size).to eq(10)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      cliente = clientes_list.first
      get clientes_url(cliente)      
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Cliente" do
        expect {
          post clientes_url,
               params: { cliente: valid_attributes }, as: :json
        }.to change(Cliente, :count).by(1)
      end

      it "renders a JSON response with the new cliente" do
        post clientes_url,
             params: { cliente: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Cliente" do
        expect {
          post clientes_url,
               params: { cliente: invalid_attributes }, as: :json
        }.to change(Cliente, :count).by(0)
      end

      it "renders a JSON response with errors for the new cliente" do
        post clientes_url,
             params: { cliente: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          nombre:   "Nombre cliente nuevo",
          rfc:      "RFC cliente nuevo",
          direccion:"direccion cliente nuevo",
          email:    "email_nuevo@mail.com" 
        }
      }
      let!(:cliente){FactoryBot.create(:cliente)}

      it "updates the requested cliente" do
        
        patch cliente_url(cliente),
              params: { cliente: new_attributes }, as: :json
        cliente.reload
        
        expect(response).to have_http_status(:ok)
        expect(cliente.nombre).to eq new_attributes[:nombre]
      end

      it "renders a JSON response with the cliente" do
        
        patch cliente_url(cliente),
              params: { cliente: new_attributes }, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      let!(:cliente){ FactoryBot.create(:cliente) }
      it "renders a JSON response with errors for the cliente" do
        patch cliente_url(cliente),
              params: { cliente: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:cliente){FactoryBot.create(:cliente)}
    it "destroys the requested cliente" do
      expect {
        delete cliente_url(cliente), as: :json
      }.to change(Cliente, :count).by(-1)
    end
  end
end
